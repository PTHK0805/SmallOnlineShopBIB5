openapi: 3.0.2
servers:
  - url: http://127.0.0.1:3000
info:
  description: This is API Doc for Angular+ NodeJS Small Online Shop
  title: Swagger API Doc for Angular+NodeJS Small Online Shop
  version: 1.0.0

tags:
  - name: Authentication
    description: Operations about Authentication
  - name: Password
    description: Operations about Password
  - name: Category
    description: Operations about Category
  - name: Product
    description: Operations about Product
  - name: Purchase
    description: Operations about Purchase
  - name: Cart
    description: Operations about Cart
  - name: Popular
    description: Operations about Popular
  - name: Users
    description: Operations about Users

paths:
  # Auth Routes
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Logs user into the system
      requestBody:
        description: Login User into the system
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "email@gmail.com"
                password:
                  type: string
                  format: password
                  example: "password123"
          application/xml:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "email@gmail.com"
                password:
                  type: string
                  format: password
                  example: "password123"
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "email@gmail.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        "200":
          description: Login Successfully.

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: Logout Successfully.

  /auth/signup:
    post:
      tags:
        - Authentication
      summary: Sign Up
      requestBody:
        description: Signup user into the system
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "UserOne"
                email:
                  type: string
                  example: "email@gmail.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        "200":
          description: Signup user Successfully.

  # Password Routes
  /auth/forgot_password:
    post:
      tags:
        - Password
      summary: Forget Password
      requestBody:
        description: Enter email to get Password reset link
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "email@gmail.com"
      responses:
        "200":
          description: Password reset link sent to your email account

  /auth/password-reset-update/{userId}/{token}:
    post:
      tags:
        - Password
      summary: Password Reset Update
      parameters:
        - name: userId
          in: path
          description: UserId id that want to change password
          required: true
          schema:
            type: string
        - name: token
          in: path
          description: Token of user who want to change password
          required: true
          schema:
            type: string
      requestBody:
        description: Forget Password Update
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: "password123"
      responses:
        "200":
          description: Password reset sucessfully.

  /auth/password-change/{userId}/{token}:
    post:
      tags:
        - Password
      summary: Password Change
      parameters:
        - name: userId
          in: path
          description: UserId id that want to change password
          required: true
          schema:
            type: string
        - name: token
          in: path
          description: Token of user who want to change password
          required: true
          schema:
            type: string
      requestBody:
        description: Change old password with new one
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  example: "passwordold"
                newPassword:
                  type: string
                  example: "passwordnew"
      responses:
        "200":
          description: Password Change Successfully
        "401":
          description: Current Password and New Password are same.
        "400":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Could not find user
  # Category Routes

  # Product Routes

  # Purchase Routes

  # ContactUs Routes

  # Popular Routes

  # Cart Routes

  # User Routes
  /users:
    get:
      tags:
        - Users
      summary: Get all Users
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: PageNumber
          schema:
            type: number
        - name: upp
          in: query
          description: Number of users that want to show per Page
          schema:
            type: number
      responses:
        "200":
          description: Returns all Users
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - Users
      summary: Create user
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: createUser
      requestBody:
        description: Created user
        content:
          application/json:
            schema:
              type: object
              properties:
                profile:
                  type: string
                  example: "apiuploads/0fe05c06-2f9d-4056-b80d-ffa37dee7c93_img1.jpg"
                name:
                  type: string
                  example: "Hla Hla"
                email:
                  type: string
                  example: "email@gmail.com"
                password:
                  type: string
                  format: password
                  example: "password123"
                address:
                  type: string
                  example: "Address"
                phone:
                  type: string
                  example: "09123456789"
                dob:
                  type: string
                  format: Date,
                  example: 1999-01-22
                type:
                  type: string
                  description: User Roles
                  enum:
                    - Admin
                    - User
          application/xml:
            schema:
              type: object
              properties:
                profile:
                  type: string
                  example: "apiuploads/0fe05c06-2f9d-4056-b80d-ffa37dee7c93_img1.jpg"
                name:
                  type: string
                  example: "Hla Hla"
                email:
                  type: string
                  example: "email@gmail.com"
                password:
                  type: string
                  format: password
                  example: "password123"
                address:
                  type: string
                  example: "Address"
                phone:
                  type: string
                  example: "09123456789"
                dob:
                  type: string
                  format: Date,
                  example: 1999-01-22
                type:
                  type: string
                  description: User Roles
                  enum:
                    - Admin
                    - User
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                profile:
                  type: string
                  example: "apiuploads/0fe05c06-2f9d-4056-b80d-ffa37dee7c93_img1.jpg"
                name:
                  type: string
                  example: "Hla Hla"
                email:
                  type: string
                  example: "email@gmail.com"
                password:
                  type: string
                  format: password
                  example: "password123"
                address:
                  type: string
                  example: "Address"
                phone:
                  type: string
                  example: "09123456789"
                dob:
                  type: string
                  format: Date,
                  example: 1999-01-22
                type:
                  type: string
                  description: User Roles
                  enum:
                    - Admin
                    - User
      responses:
        "200":
          description: Created User Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  profile:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
                  password:
                    type: string
                    format: password
                  address:
                    type: string
                  phone:
                    type: string
                  dob:
                    type: string
                    format: date,
                  type:
                    type: string
                  _id:
                    type: string
                  createdAt:
                    type: string
                  updatedAt:
                    type: string
                  _v:
                    type: number
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /users/{userId}:
    post:
      tags:
        - Users
      summary: Find user by ID
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "62c6a49a087a13d74076e514"
                  profile:
                    type: string
                    example: "apiuploads/0fe05c06-2f9d-4056-b80d-ffa37dee7c93_img1.jpg"
                  name:
                    type: string
                    example: "User one"
                  email:
                    type: string
                    example: "userone@gmail.com"
                  password:
                    type: string
                    format: password
                    example: "password123"
                  address:
                    type: string
                    example: "Address"
                  phone:
                    type: string
                    example: "0912345678"
                  dob:
                    type: string
                    format: date
                  type:
                    type: string
                    description: User Roles
                    enum:
                      - Admin
                      - User
                  createdAt:
                    type: string
                    format: date
                  updatedAt:
                    type: string
                    format: date
        "404":
          description: User not found
    put:
      tags:
        - Users
      summary: Update a user
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: updateUserId
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing user data
        content:
          application/json:
            schema:
              type: object
              properties:
                profile:
                  type: string
                  example: "apiuploads/0fe05c06-2f9d-4056-b80d-ffa37dee7c93_img1.jpg"
                name:
                  type: string
                  example: "User one"
                email:
                  type: string
                  example: "userone@gmail.com"
                password:
                  type: string
                  format: password
                  example: "password123"
                address:
                  type: string
                  example: "Address"
                phone:
                  type: string
                  example: "0912345678"
                dob:
                  type: string
                  format: date
                type:
                  type: string
                  description: User Roles
                  enum:
                    - Admin
                    - User
                created_user_id:
                  type: string
                  example: "62fde243b554f4955fdf7914"
                updated_user_id:
                  type: string
                  example: "62fde243b554f4955fdf7914"
      responses:
        "200":
          description: Updated Successfully!
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  profile:
                    type: string
                    example: "apiuploads/0fe05c06-2f9d-4056-b80d-ffa37dee7c93_img1.jpg"
                  name:
                    type: string
                    example: "User one"
                  email:
                    type: string
                    example: "userone@gmail.com"
                  password:
                    type: string
                    format: password
                    example: "password123"
                  address:
                    type: string
                    example: "Address"
                  phone:
                    type: string
                    example: "0912345678"
                  dob:
                    type: string
                    format: date
                  type:
                    type: string
                    description: User Roles
                    enum:
                      - Admin
                      - User
                  created_user_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  updated_user_id:
                    type: string
                    example: "62fde243b554f4955fdf7914"
                  createdAt:
                    type: string
                    format: date
                  updatedAt:
                    type: string
                    format: date
        "405":
          description: Invalid input
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      tags:
        - Users
      summary: Deletes a user
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: User id to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Deleted User Successfully!
        "400":
          description: Invalid post value

  # /api/users/search:
  #   post:
  #     tags:
  #       - Users
  #     summary: Get search users
  #     description: This can only be done by the logged in user.
  #     security:
  #       - bearerAuth: []
  #     parameters:
  #       - name: page
  #         in: query
  #         description: PageNumber
  #         schema:
  #           type: number
  #       - name: upp
  #         in: query
  #         description: Number of users that want to show per Page
  #         schema:
  #           type: number
  #     requestBody:
  #       description: Search with Username, Email, Fromdate & Todate
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               username:
  #                 type: string
  #                 example: "Example User"
  #               email:
  #                 type: string
  #                 example: "example@gmail.com"
  #               fromDate:
  #                 type: string
  #                 format: date
  #               toDate:
  #                 type: string
  #                 format: date
  #     responses:
  #       "200":
  #         description: Returns search Users
  #       "400":
  #         description: An error occured
  #       "401":
  #         $ref: "#/components/responses/UnauthorizedError"

components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid

# 2) Apply the security globally to all operations
security:
  - bearerAuth: []
